diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
index 6f12af2..4dbc744 100644
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
@@ -49,6 +49,7 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.lang.ref.WeakReference;
 import java.util.List;
+import java.util.ArrayList;
 
 import com.facebook.react.modules.core.PermissionListener;
 import com.facebook.react.modules.core.PermissionAwareActivity;
@@ -565,13 +566,23 @@ public class ImagePickerModule extends ReactContextBaseJavaModule
                                    @NonNull final Callback callback,
                                    @NonNull final int requestCode)
   {
-    final int writePermission = ActivityCompat
+    int selfCheckResult = 0;
+    switch (requestCode) {
+      case REQUEST_PERMISSIONS_FOR_CAMERA:
+        selfCheckResult = ActivityCompat
+             .checkSelfPermission(activity, Manifest.permission.CAMERA);
+        if (selfCheckResult == PackageManager.PERMISSION_GRANTED) {
+          selfCheckResult = ActivityCompat
             .checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE);  
-    final int cameraPermission = ActivityCompat
-            .checkSelfPermission(activity, Manifest.permission.CAMERA);
+        }
+      break;
+       case REQUEST_PERMISSIONS_FOR_LIBRARY:
+        selfCheckResult = ActivityCompat
+            .checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE);
+       break;
+    }
 
-    final boolean permissionsGrated = writePermission == PackageManager.PERMISSION_GRANTED &&
-            cameraPermission == PackageManager.PERMISSION_GRANTED;
+    final boolean permissionsGrated = selfCheckResult == PackageManager.PERMISSION_GRANTED;
 
     if (!permissionsGrated)
     {
@@ -621,7 +632,18 @@ public class ImagePickerModule extends ReactContextBaseJavaModule
       }
       else
       {
-        String[] PERMISSIONS = {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA};
+        List<String> permissions = new ArrayList<String>();
+        if (requestCode == REQUEST_PERMISSIONS_FOR_CAMERA )
+        {
+          permissions.add(Manifest.permission.CAMERA);
+          permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        }
+        if (requestCode == REQUEST_PERMISSIONS_FOR_LIBRARY )
+        {
+          permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        }
+
+        String[] PERMISSIONS = permissions.toArray(new String[0]);
         if (activity instanceof ReactActivity)
         {
           ((ReactActivity) activity).requestPermissions(PERMISSIONS, requestCode, listener);
diff --git a/node_modules/react-native-image-picker/ios/ImagePickerManager.m b/node_modules/react-native-image-picker/ios/ImagePickerManager.m
index 683dba5..ccf9fe3 100644
--- a/node_modules/react-native-image-picker/ios/ImagePickerManager.m
+++ b/node_modules/react-native-image-picker/ios/ImagePickerManager.m
@@ -460,11 +460,18 @@ - (void)imagePickerController:(UIImagePickerController *)picker didFinishPicking
 
                 if (videoURL) { // Protect against reported crash
                   NSError *error = nil;
-                  [fileManager moveItemAtURL:videoURL toURL:videoDestinationURL error:&error];
-                  if (error) {
-                      self.callback(@[@{@"error": error.localizedFailureReason}]);
-                      return;
-                  }
+
+                    // If we have write access to the source file, move it. Otherwise use copy.
+                    if ([fileManager isWritableFileAtPath:[videoURL path]]) {
+                        [fileManager moveItemAtURL:videoURL toURL:videoDestinationURL error:&error];
+                    } else {
+                        [fileManager copyItemAtURL:videoURL toURL:videoDestinationURL error:&error];
+                    }
+
+                    if (error) {
+                        self.callback(@[@{@"error": error.localizedFailureReason}]);
+                        return;
+                    }
                 }
             }
 
